set(TARGET_TARGETNAME SpaceApp)

if(OCULUS_SDK)
	SET(TARGET_SRC
		main.cpp
		)
else(OCULUS_SDK)
	SET(TARGET_SRC
		ExampleLayer.h
		ExampleLayer.cpp
		SpaceEXApplication.h
		SpaceEXApplication.cpp
		main.cpp
		)
endif(OCULUS_SDK)
   
ADD_EXECUTABLE(${TARGET_TARGETNAME} ${TARGET_SRC})

# Find and link the Components library and all its dependent libraries, compile flags, and 
# include directories.  In detail, this single call does the following:
# - Finds the Components package and imports all its targets.
# - Links the Components library into the Stub executable target.
# - Finds all external libraries (e.g. FreeImage) that Components depends on and imports all their targets.
# - Links all external libraries into the Stub executable target.
# This is all accomplished via the ComponentsConfig.cmake file (in the root dir of the Components package) which is 
# generated by the `install` target in the Components library.
target_package(${TARGET_TARGETNAME} Components)
target_package(${TARGET_TARGETNAME} Leap)

if(OCULUS_SDK)
  ADD_DEFINITIONS(-DOCULUS_SDK)
  # Please keep these in alphabetical order.
  find_package(OculusSDK REQUIRED)

  if(WIN32)
    # Where to find Oculus SDK
	SET(OCULUS_SDK_ROOT_DIR $ENV{OCULUS_SDK_ROOT_DIR} CACHE PATH "Path where to find the Oculus SDK")
	IF(NOT OCULUS_SDK_ROOT_DIR)
		MESSAGE(FATAL_ERROR "Error: Oculus SDK not found.")
	ENDIF(NOT OCULUS_SDK_ROOT_DIR)
  endif(WIN32)

  include_directories(
    BEFORE
    ${OCULUS_SDK_INCLUDE_DIRS}
	${OCULUS_SDK_ROOT_DIR}/LibOVR/Src
   )

   target_link_libraries(${TARGET_TARGETNAME} winmm.lib
										      Ws2_32.lib
                                              ${OCULUS_SDK_LIBRARY}
                                              )
endif(OCULUS_SDK)                                           
