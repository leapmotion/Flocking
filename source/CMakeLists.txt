cmake_minimum_required(VERSION 3.0)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/..")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/../cmake-module")
include(Common)

project(Space)
set(TARGET_TARGETNAME SpaceApp)
	SET(TARGET_SRC
		# ExampleLayer.h
		# ExampleLayer.cpp
		# SpaceEXApplication.h
		# SpaceEXApplication.cpp
    # main.cpp
		main_libovr.cpp
  )
ADD_EXECUTABLE(${TARGET_TARGETNAME} ${TARGET_SRC})

# Find and link the Components library and all its dependent libraries, compile flags, and 
# include directories.  In detail, this single call does the following:
# - Finds the Components package and imports all its targets.
# - Links the Components library into the Stub executable target.
# - Finds all external libraries (e.g. FreeImage) that Components depends on and imports all their targets.
# - Links all external libraries into the Stub executable target.
# This is all accomplished via the ComponentsConfig.cmake file (in the root dir of the Components package) which is 
# generated by the `install` target in the Components library.

set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:LIBCMT") #  Cinder's HACK: This is in platform too so it's probably good
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:LIBCMT") #  Cinder's HACK: This is in platform too so it's probably good

find_package(Components)
# The target_link_components function finds and links exactly the minimal set of libraries
# needed by the specified components.
target_link_components(${TARGET_TARGETNAME} PUBLIC Application GLController GLShaderLoader GLTexture2Loader)

# target_package(${TARGET_TARGETNAME} Leap LINK_TYPE PUBLIC)
target_package(${TARGET_TARGETNAME} OculusSDK LINK_TYPE PUBLIC)

target_link_libraries(${TARGET_TARGETNAME} PUBLIC winmm.lib) # Oculus's HACK (not ours)
target_link_libraries(${TARGET_TARGETNAME} PUBLIC	Ws2_32.lib) # Oculus's HACK (not ours)
